<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="handus.dao.MemberDao">
	<insert id="insertMember" parameterType="member">
		<selectKey keyProperty="m_pk" order="BEFORE" resultType="int">
			select MEMBER_SEQ.NEXTVAL from dual
		</selectKey>
		insert all 
		
		into MEMBER 
    	( M_PK, M_ID, M_PASSWORD, M_NAME, M_EMAIL, M_PHONENUM, M_ADDRESS )
    	values ( #{m_pk}, #{m_id}, #{m_password}, #{m_name}, #{m_email}, #{m_phonenum}, #{m_address} )
    	<foreach collection="miList" item="mi">
    		into MEMBER_INTEREST (MI_PK, M_PK, C_PK)
    			VALUES	(GET_PK_MI, #{m_pk}, #{mi.c_pk})
    	</foreach>
    	<foreach collection="authList" item="auth">
    		into MEMBER_AUTHORITY (MA_PK, M_PK, MA_AUTHORITY)
    			VALUES (GET_PK_MA, #{m_pk}, #{auth.ma_authority})
    	</foreach>
    	select * from dual
	</insert>
	
	<insert id="insertApiMember" parameterType="member">
		<selectKey keyProperty="m_pk" order="BEFORE" resultType="int">
			select MEMBER_SEQ.NEXTVAL from dual
		</selectKey>
		insert all 
		
		into MEMBER
			( M_PK, M_NAME, M_EMAIL, M_PHONENUM, M_ADDRESS , M_APITYPE, M_APIID)  <!-- APITYPE 1번 카카오, 2번 네이버 -->
		values (#{m_pk}, #{m_name}, #{m_email}, #{m_phonenum}, #{m_address}, #{m_apiType}, #{m_apiId})
		<foreach collection="miList" item="mi">
    		into MEMBER_INTEREST (MI_PK, M_PK, C_PK)
    			VALUES	(GET_PK_MI, #{m_pk}, #{mi.c_pk})
    	</foreach>
    	<foreach collection="authList" item="auth">
    		into MEMBER_AUTHORITY (MA_PK, M_PK, MA_AUTHORITY)
    			VALUES (GET_PK_MA, #{m_pk}, #{auth.ma_authority})
    	</foreach>
    	select * from dual
	</insert>
	
	<update id="updateMember" parameterType="member">
		update MEMBER
		set M_PASSWORD = #{m_password}, M_NAME = #{m_name}, M_ADDRESS = #{m_address} 
		where M_PK = #{m_pk} 
	</update>
	
	<delete id="deleteMember" parameterType="int">
		delete from MEMBER
		where M_PK = #{m_pk} 
	</delete>
	
	<select id="selectByID" parameterType="string" resultMap="memberMap">
		select 
			m.M_PK, m.M_ID, m.M_PASSWORD, m.M_NAME, m.M_EMAIL, m.M_PHONENUM, m.M_ENABLED, m.M_REGDATE, m.M_ADDRESS, m.M_APITYPE, m.M_APIID,
			mi.c_pk, ma.ma_authority
			from MEMBER m 
				LEFT OUTER JOIN MEMBER_INTEREST mi ON (m.m_pk = mi.m_pk ) 
					LEFT OUTER JOIN MEMBER_AUTHORITY ma ON (m.m_pk = ma.m_pk)	
		where M_ID = #{m_id} 
	</select>
	
	<select id="selectByNum" parameterType="int" resultType="member">
		select 
			m.M_PK, m.M_ID, m.M_PASSWORD, m.M_NAME, m.M_EMAIL, m.M_PHONENUM, m.M_ENABLED, m.M_REGDATE, m.M_ADDRESS, m.M_APITYPE, m.M_APIID,
			mi.c_pk, ma.authority	 
		 from MEMBER m
		where M_PK = #{m_pk} 
	</select>
	
	<select id="selectAllMember" resultType="member">
		select * from MEMBER
	</select>
	
	<!-- 인증관련 -->
	<insert id="insertMemberVerify" parameterType="memberVerify">
		insert into MEMBER_VERIFY 
			( MV_PK, M_PK, MV_ECODE, MV_EDATE )
			values (MEMBER_VERIFY_SEQ.NEXTVAL, #{m_pk}, #{mv_ecode}, sysdate)
	</insert>
	
	<insert id="insertMemberAuth" parameterType="list" >
		insert into MEMBER_AUTHORITY (ma_pk, m_pk, ma_authority)
			VALUES
		<foreach collection="list" item="item" > 
			(MEMBER_AUTHORITY_SEQ.NEXTVAL, #{item.m_pk}, #{item.ma_authority})
		</foreach>
	</insert>
	
	<update id="updateMemberAuth" parameterType="auth">
		update MEMBER_AUTHORITY set ma_authority = #{ma_authority}
			where m_pk = #{m_pk} and ma_authority =
				<if test="ma_authority == 'ROLE_MEMBER' ">
					'ROLE_MEMBER_NV'
				</if>
	</update>
	
	<select id="selectMemberVerify" parameterType="int" resultType="memberVerify">
		select mv_ecode, mv_edate from member_verify
			where m_pk = #{m_pk}
	</select>
	
	<update id="updateMailUUID" parameterType="memberVerify">
		update MEMBER_VERIFY set mv_ecode = #{mv_ecode} , mv_edate = sysdate 
			where m_pk = #{m_pk}
	</update>
	
	<update id="updateMemberVerify">
		update member set m_eval = #{m_eval} where m_pk = #{m_pk}
	</update>
	
	<select id="selectByApiId" parameterType="string" resultMap="memberMap">
		select * 
			from MEMBER m 
				LEFT OUTER JOIN MEMBER_INTEREST mi ON (m.m_pk = mi.m_pk ) 
					LEFT OUTER JOIN MEMBER_AUTHORITY ma ON (m.m_pk = ma.m_pk)	
		where m_apiid = #{m_apiId} 
	</select>
	
	<resultMap type="member" id="memberMap">
		<result property="m_pk" column="m_pk"/>
		<result property="m_id" column="m_id"/>
		<result property="m_password" column="m_password"/>
		<result property="m_name" column="m_name"/>
		<result property="m_email" column="m_email"/>
		<result property="m_phonenum" column="m_phonenum"/>
		<result property="m_enabled" column="m_enabled"/>
		<result property="m_regdate" column="m_regdate"/>
		<result property="m_address" column="m_address"/>
		<result property="m_eval" column="m_eval"/>
		<result property="m_pval" column="m_pval"/>
		<result property="m_apiType" column="m_apitype"/>
		<result property="m_apiId" column="m_apiid"/>
		<collection property="miList" resultMap="miMap"/>
		<collection property="authList" resultMap="authMap"/>
	</resultMap>
	
	<resultMap type="memberInterest" id="miMap">
		<result property="mi_pk" column="mi_pk"/>
		<result property="m_pk" column="m_pk"/>
		<result property="c_pk" column="c_pk"/>
	</resultMap>
	
	<resultMap type="auth" id="authMap">
		<result property="ma_pk" column="ma_pk"/>
		<result property="m_pk" column="m_pk"/>
		<result property="ma_authority" column="ma_authority"/>
	</resultMap>
</mapper>